#!/usr/bin/env Rscript
##==================================================================================================
## PURPOSE
##
## @Author:
## @Created:
##
## @Input:
##
## @Output:
##==================================================================================================
## required packages
##==================================================================================================
if (!require("seqinr")) {
install.packages("seqinr", dependencies = TRUE)
library(seqinr)
}
if (!require("Biostrings")) {
install.packages("Biostrings", dependencies = TRUE)
library("Biostrings")
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
}
if (!require("qvalue")) {
install.packages("qvalue", dependencies = TRUE)
library(qvalue)
}
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
##==================================================================================================
## PREAMBLE
##==================================================================================================
setwd('~/predictRGs_share')
list.files(path="./data")
source("./PredictRGs.r")
TEname <- "AluY"
#TEname <- "L1"
cat ("\n !! Working on ", TEname, " Lineage!! \n")
# read in the mobile activity data of all the TE elements, the consensus, and the sequences of all TE elements
activity.fname <- paste("./data/", TEname, "_activity.txt", sep='')
consensus.fname <- paste("./data/", TEname, "_consensus.fasta", sep='')
seqs.fname <- paste("./data/", TEname, "_sequences.fasta", sep='')
activity <- read.table(activity.fname, sep="\t", header=TRUE);
consensus <- read.fasta(file = consensus.fname, as.string = TRUE, forceDNAtolower = FALSE, seqonly = TRUE)
TEseqs <- read.fasta(file =seqs.fname, as.string = TRUE, forceDNAtolower = FALSE, set.attributes = FALSE)
len <- nchar(consensus[[1]])
##==================================================================================================
## parameters
##==================================================================================================
numIteration <- 100000
window.size <- 10
alpha <- 0.05
qvalue
for (i in 1:10) plot (rnorm (100))
set.seed(1)
x <- abs(rnorm(1000,2.2,1.3))
# The function to compute the log probability density for each data point
# and its first and second derivatives.  Looks at data in "x".
logp <-
deriv (quote (
-lsigma + log (dnorm((x-mu)/exp(lsigma))
+ dnorm((-x-mu)/exp(lsigma)))),
c("mu","lsigma"), fun=TRUE, hessian=TRUE)
# Minus log likelihood function, for data in "x".
logl <- function (p) {
lp <- logp(p[1],p[2])
ll <- -sum(lp)
attr(ll,"gradient") <- -colSums(attr(lp,"gradient"))
attr(ll,"hessian") <- -colSums(attr(lp,"hessian"))
ll
}
# Estimates found from two starting points.
cat("estimate starting at 0,0:\n\n")
print (nlm (logl, c(0,0)))
cat("\nestimate starting at 0.1,0:\n\n")
print (nlm (logl, c(0.1,0)))
install.packages("ngcv")
install.packages("mgcv")
library (mgcv)
install.packages("mgcv")
?pinvgauss
6*140*1.05
install.packages("mgcv")
remove.packages("mgcv")
install.packages("BCBCSF")
setwd("~/math/public_html/software/dmpvalues")
library("R2OpenBUGS")
